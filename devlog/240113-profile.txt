프로필에 대해 간단히 정리해보려고 하는데, 사실 프로필은 배포와도 관련이 있기 때문에 그 부분에 대해서도 짚고 넘어가고자 한다.

우선 프로필은 properties 파일로 정리해뒀고, 아래와 같이 3개의 파일을 두었다.

(1) application.properties
(2) application-local.properties
(3) application-prod.properties

(1) 의 경우 내용이 거의 없다. 즉, `--spring.profiles.active=default` 인 상태와도 같다. 이는 profile 을 아무 것도 설정하지 않으면 애플리케이션을 시작하기 않겠다는 의도를 내포하고 있다.
(2) 의 경우 로컬에서 실행하기 위한 환경이다. 로컬 DB 에 접속하기 위한 정보가 설정되어 있다. IntelliJ 의 시작 프로필을 local 로 설정했기에 IntelliJ 로 실행한다면 기본적으로 `--spring.profiles.active=local` 로 실행된다.
(3) 은 실제 배포 환경에서 사용할 설정 정보이다. gitignore 에 추가하여 원격 저장소인 github 에서도 보지 못 하게 막아두었다.

다만 이렇게 하면 github 를 이용한 CI/CD 에 번거로운 추가 설정이 필요할 수 있다. 만일 실무 프로젝트라면 git repository 자체를 private 으로 설정해두니 이러한 고민은 필요 없을 것이다.
굳이 실무에서 이러한 상황이 발생한다면... application-prod.properties 만 공유하여 관리하는 별도의 repository 를 만들어 2개의 repository 를 병합한다든지 방법이야 있겠지만, 역시 이것도 번거로울 것 같다. 그리고 결과적으로 product 를 배포한다는 행위는 개발자의 주의를 필요로 하기 때문에 최대한 신중을 기하고 배포 메뉴얼, 배포 셸 스크립트 등을 만들어 최대한 실수를 예방해야 한다.

시스템적으로 생각한다면 사용자에게 끊김 없이 배포하기 위해서, 즉 continuous delivery 를 위해서 테스트 서버를 두고 롤링 업데이트를 하는 것이 안전할 것이다.
테스트 서버를 둔다는 것은 실제 배포 서버와 거의 흡사한 별도의 서버를 두고 배포 테스트 및 인수 테스트를 하는 것을 의미한다. 실수로 application-prod.properties 에 빠트린 내용이 있다면 인수 테스트를 통해 검증할 수 있다.
롤링 업데이트를 한다는 것은 로드 밸런서를 두고, 동일한 애플리케이션을 순차적으로 재배포하는 것을 의미한다. 첫 번째 애플리케이션이 제대로 실행이 되지 않는다면 프로필을 포함하여 배포 과정 어딘가에 실수가 있었다고 생각할 수 있다. 첫 번째 애플리케이션이 중단되었지만 다른 애플리케이션들이 살아 있으므로 사용자는 여전히 해당 서비스를 끊김 없이 이용할 수 있다.

정리해보자면, 프로필은 파일 별로 나누고 실행 시점에 profile 설정을 강제하되, 실수 방지 및 CD 를 위해서는 시스템적인 안전책을 세워두어야 한다고 할 수 있다.