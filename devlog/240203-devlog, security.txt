제법 오랜만에 devlog 를 작성하는 것 같다. 최근 회사에서 결제 모듈을 구현하고 기존 코드를 리팩토링하는 업무를 맡았는데, 결제 자체가 할 것도 많고, 비기능적 요구사항에서 예상치 못한 예외도 생겨서 포트폴리오 작업이 조금 더뎌졌다.

이번에는 현재까지의 작업 현황과 앞으로의 작업 계획을 간단히 정리할 것이다.

1. 우선 기획했던 출석관리, 숙제관리, 수업진도 관리 등의 기능을 과감하게 제거했다. 이번 프로젝트는 이때까지 배웠던 spring 과 jpa 를 정리하는 겸 만드는 프로젝트이기도 하고, 당초 기획은 가볍고 빠르게 쓸 애플리케이션을 지향했기에 설정할 게 너무 많거나, 많은 기능을 제공하는 것이 그것과 맞지 않다고 판단했다. 이후 기회가 된다면 언급한 기능들을 후속 개발해도 좋을 것이다.

2. api 가이드 문서를 생성했다. 공통적으로 발생하는 api 예외나 코드 등은 여기에서 확인할 수 있도록 했다. 따라서 각 api 문서에서는 공통적인 api 예외에 대한 설명은 생략하기로 했다.

3. academy 등록 및 인증까지 얼추 구현했다. 앞으로 teacher -> student -> book -> practice -> exam 순으로 기능 구현을 하고 마무리할 생각이다. 그 이후에는 devOps 를 공부하고 다음 포트폴리오에 적용할 계획이다.

4. 프론트 프레임워크를 무엇을 쓸지 고민이다. 일단 지금은 react 를 사용하자는 생각은 들지만 필요에 따라 vue 를 사용할 수도 있을 것 같다.

5. 오늘도 ... 여러 security 설정 및 환경설정을 추가했다. 어째 주말에는 매번 security 작업만 하는 느낌이다. 실제로 그만큼 기능이 많고 내가 아직 배울 게 더 많다는 뜻일 것이다.
5.1. security 내용이 점점 커지면서 결국 SecurityConfig 를 config 패키지에서 security 패키지로 옮겼다. 나머지 클래스들은 여전히 config 패키지 안에 있다. 겸사겸사 InfraConfig 를 따로 만들어 infrastructure 패키지 안에 있는 클래스들은 그 안에 등록했다.
5.2. AuthenticationFailureHandler 를 구현하여 인증에 실패한 경우 그 원인을 알맞게 응답하도록 했다. 그리고 이를 사용하는 AuthenticationFailureHandlerImplFilter 를 SecurityFilterChain 에 등록했다. 이 부분은 테스트가 좀 더 필요하다.
5.3. AuthenticationEntryPoint 를 구현하여 SecurityFilterChain 에 등록했다. 인증되지 않은 사용자가 인증이 필요한 페이지에 접근하려고 하면 이 핸들러가 동작한다.
5.4. AccessDeniedHandler 를 구현하여 SecurityFilterChain 에 등록했다. 인가되지 않은 사용자가 인가가 필요한 페이지에 접근하려고 하면 이 핸들러가 동작한다. 그리고 기존의 WebControllerAdvice 에 있는 AccessDeniedException 을 제어하는 ExceptionHandler 는 제거했다. 실제로 테스트해보니 ExceptionHandler 가 작동하지 않음을 알게 되었다. baeldung 코드 참고한 건데 아무래도 최근 프레임워크에서는 적용되지 않는 것 같다.
