최근에는 React 로 프론트 프로젝트를 만들어 API 와 연동하는 작업 및 통합테스트를 계속해서 진행했다.
그동안 미루어왔던 아이디어, 리팩토링, TO-DO 등을 한 번 정리하는 기록이다.

1. 원장 말고 교사의 등록 시에도 메일 인증을 추가하기.
단, 이메일은 수정이 불가능하며, 인증되지 않은 이메일은 일정 시간이 지난 후 삭제해야 한다.
학생은 애초에 이메일 등록, 수정할 수 없다.

2. 교사의 등록 직후 상태는 PENDING. 원장은 교사를 PENDING 으로는 변경할 수 없다.

3. AccessLogInterceptor 는 현재 무조건 접속 로그를 남기고 있다.
Annotation 을 하나 생성해서 로그를 남길지 말지, 또는 접근자의 정보만 남길지, URI 만 남길지 등의 옵션을 줄 수 있으면 동적으로 로그를 제어할 수 있다.
또는 가능하다면 로그 레벨도 정할 수 있으면 좋겠다.
하지만 꼭 필요한 기능은 아니라서 아마 구현할 일은 없을 듯하다.

4. 현재는 student.grade 가 int 인데, 실제로 연동하다보니 이것도 enum 으로 만드는 게 더 좋았겠다는 생각이 든다.
사실 초등 1학년부터 고등 3학년까지라는 학년 정보는 앞으로도 변경 가능성이 적은 속성 정보이다보니 더욱 그렇다.

5. enum 을 만들 때는 항상 EnumType(예시 이름) 같은 interface 를 만들고, value() 라는 메소드를 구현하게 하기
5-1. enum 타입 자체는 상수값만 있으면 되고, 그에 대한 private final String value 는 필수가 아니다.
하지만 개발을 하고, 또 회사에서 프론트와 씨름하다 보니 enum 의 presentation 을 위한 별도의 속성은 거의 무조건 있는 게 좋다.
API 응답값에도 status, statusValue 같은 식으로 상수값의 변수명과 한글뜻 등을 같이 응답해주면 프론트도 편하고 백도 씨름하거나 문서화할 필요가 적어진다.
5-2. Spring Rest Docs 를 만들 때 EnumType 을 토대로 이를 상속하고 있는 enum 들을 모아서 쉽게 문서화하고 갱신할 수 있다.

6. 주기적으로, getWords().stream().noneMatch(w -> w.getStatus() == CREATED) && modifiedDateTime 이 일주일이 지난 교재들은 삭제하기

7. @Controller 가 아니라 @Service 에서 @Valid 를 사용한 유효성 검사
검색해보니 가능은 하던데 뭐가 더 좋은지 장단점은 따져봐야 한다.
아무래도 Service 에는 가능하면 의존성을 낮추는 게 좋으니까...

8. 인공지능 채점 서비스를 위한 LLM 연구

9. 좀 쓸데없는 거긴 하지만 ... BookReplace 라는 클래스의 이름이 뭔가 근질근질하다.
혹시 모를 유지보수까지 생각해서 다음에는 POST, PATCH 객체를 나누기로 하고...이번에는 그냥 넘어가려고 한다.

10. 지금 테스트 코드에는 객체 생성 시 생성자와 빌더 패턴이 혼재되어 있는데, 이는 빌더 패턴으로 통일하는 게 맞다.
이후 변경 시 테스트에서 컴파일 에러를 방지할 거라면 특히.

11. 현재 회원가입 단계에서만 postcodify API 를 연동하고 있는데, Open API 여서 사용에 약간의 제한이 발생할 수 있다.
주소 검색 서버를 별도로 생성하거나, 카카오맵을 쓰는 것도 고려해봐야 한다.

12. Book 에 사용된 횟수, 즐겨찾기 기능 등을 추가하면 사용자 경험이 개선될 수 있다.

13. Term 엔티티에도 있는 내용이지만, 역치 인덱스를 사용한 검색 엔진 구축을 한 번은 해보는 게 좋다.
대상은 book.publisher, book.name, book.chapter, subject.subject, study.title 정도.

14. JMeter, nGrinder 등 성능 테스트 솔루션도 한 번 공부해보기.

15. Spring Security 의 PreAuthorize, PostAuthorize 등에서 사용하는 표현식 공부하기.