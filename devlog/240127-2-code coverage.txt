
테스트 커버리지란, 테스트 코드가 얼마나 실제 코드를 테스트 했는지를 나타내는 지표이다. 테스트 커버리지가 높을 수록 제품을 충분히 검증했고, 그만큼 제품의 신뢰성이 향상된다.
그 중에서도 코드 커버리지는 소프트웨어 테스트의 충분성을 나타내는 지표 중 하나로, 소스코드의 구문, 조건, 결정 등을 기준으로 소프트웨어가 얼마나 테스트되었는지를 나타내는 기준이다.

간단하게, 코드 커버리지가 50% 라면 소스코드의 50%가 테스트 되었다는 것을 의미한다. 그런데 이 50% 라는 게 어떤 것을 의미하는지에도 여러 종류가 있다.
우리나라의 정보처리기사 자격증에서는 코드 커버리지의 유형을 다음과 같이 정리하고 있다.

    - 구문 커버리지(Statement Coverage)
    - 결정 커버리지(Decision Coverage)
    - 조건 커버리지(Condition Coverage)
    - 조건결정 커버리지
    - 변경 조건/결정 커버리지
    - 다중 조건 커버리지

나도 이 모든 커버리지에 대해 자세히 알지는 못 한다. 그래도 정보처리기사 정도는 충분히 취득할 수 있을 것이다.
이번 devlog 에서는 위에서부터 언급된 구문 커버리지, 결정 커버리지, 조건 커버리지 3개만을 다룰 예정이다.

```
    public boolean checkDuplication(String loginId, String email, String phone) {
        boolean hasLoginId = StringUtils.hasText(loginId);
        boolean hasEmail = StringUtils.hasText(email);
        boolean hasPhone = StringUtils.hasText(phone);

        if (!hasOnlyOne(hasLoginId, hasEmail, hasPhone)) { // (1)
            throw new OneParamToCheckDuplException();
        }

        Optional<User> optUser = Optional.empty();
        if (hasLoginId) { // (2)
            optUser = userQueryRepository.findOne(
                    user.loginId.eq(loginId),
                    userStatusNotIn(PENDING, TRIAL),
                    userEmailVerifiedEq(true));
        } else if (hasEmail) { // (3)
            optUser = userQueryRepository.findOne(
                    user.email.eq(email),
                    userStatusNotIn(PENDING, TRIAL),
                    userEmailVerifiedEq(true));
        } else if (hasPhone) { // (4)
            optUser = userQueryRepository.findOne(
                    user.phone.eq(phone),
                    userStatusNotIn(PENDING, TRIAL),
                    userEmailVerifiedEq(true));
        }
        return optUser.isEmpty(); // (5)
    }

    private static boolean hasOnlyOne(boolean a, boolean b, boolean c) {
        return a ^ b ^ c && !(a && b && c);
    }

    private static BooleanExpression userStatusNotIn(UserStatus... statuses) {
        return user.status.notIn(statuses);
    }

    private static BooleanExpression userEmailVerifiedEq(boolean verified) {
        return user.emailVerified.eq(verified);
    }
```
    - 위 메소드는 UserQueryService 에서 사용 중인 메소드이다. 이 메소드는 로그인 아이디, 이메일, 휴대폰 번호 중 하나만을 받아서 중복 여부를 확인한다.
    - 참고로, 위 코드의 로직에서는 정상적인 방법으로 (5) 에 도달할 수 없으므로 논외로 치도록 하자.

- 구문 커버리지
    - 가장 기초적이고 적용 수준이 낮은 커버리지이다. 실제로 어떤 코드 라인이 실행되었는지를 판단한다. 즉, 어떤 코드가 한 번이라도 실행되었다면 구문 커버리지를 만족한 것으로 취급한다.
    - 따라서, 모든 소스코드를 실행시키기 위해서는 다음과 같은 테스트 케이스만 있어도 된다.

        - loginId, email, phone 이 모두 값이 있는 경우(혹은 값이 2개가 있거나, 아예 없는 것도 가능)
        - loginId 만 값이 있는 경우
        - email 만 값이 있는 경우
        - phone 만 값이 있는 경우

    - 즉, 구문 커버리지를 100% 충족시키기 위해 수행해야 할 테스트 케이스는 4개이다.

- 결정 커버리지
    - 결정 커버리지는 코드 라인이 실행되었는지와 더불어 조건문의 참/거짓 여부까지 판단한다.
    - 즉, (1) 에서 한 번씩 true/false 를 넣어햐 하고, 마찬가지로 (2), (3), (4) 에서도 한 번씩 true/false 를 넣어야 한다.
        - 여기서 그치지 말고 한 발만 더 나아가보자. 지금부터 설명하려는 내용은 분명 결정 커버리지는 아님을 명심하자.
        - true/false 를 기준으로 한다면 ... 쿼리를 대상으로도 검증을 해볼 수 있지 않을까?

            - loginId 가 같다 && 유저 상태가 PENDING, TRAIL 이 아니다 && 이메일이 인증되었다 == true/false
            - email 이 같다 && 유저 상태가 PENDING, TRAIL 이 아니다 && 이메일이 인증되었다 == true/false
            - phone 이 같다 && 유저 상태가 PENDING, TRAIL 이 아니다 && 이메일이 인증되었다 == true/false

        - 이렇듯 쿼리 실행 결과에 따라 return 값이 달라지기 때문에 쿼리 실행 결과의 true/false 도 같이 테스트해볼 수 있다.

            - loginId, email, phone 이 모두 값이 있는 경우

            - loginId 에 값이 있고
                - 이메일이 인증된, 정상 상태인 유저 중 loginId 가 같은 유저가 있는 경우
                - 이메일이 인증된, 정상 상태인 유저 중 loginId 가 같은 유저가 없는 경우

            - email 에 값이 있고
                - 이메일이 인증된, 정상 상태인 유저 중 email 이 같은 유저가 있는 경우
                - 이메일이 인증된, 정상 상태인 유저 중 email 이 같은 유저가 없는 경우

            - phone 에 값이 있고
                - 이메일이 인증된, 정상 상태인 유저 중 phone 이 같은 유저가 있는 경우
                - 이메일이 인증된, 정상 상태인 유저 중 phone 이 같은 유저가 없는 경우

        - 즉, 내 기준에서는 쿼리의 실행 결과값까지 고려했을 때 결정 커버리지를 충족시키기 위해 수행해야 할 테스트 케이스는 7개이다.

- 조건 커버리지
    - 조건 커버리지는 조건문의 각 조건이 참/거짓 여부를 판단하는데 얼마나 기여했는지를 판단한다.
    - 예를 들어, hasOnlyOne 메소드의 경우 && 만을 두고 판단했을 때, (a ^ b ^ c) 조건과 !(a && b && c) 조건이 있다.
        - 더 깊게 들어가서 a, b, c 각각이 true/false 일 때도 고려할 수 있지만, 일단 잠깐만 생략하도록 하자.
    - 위 조건에 대하여 조건 커버리지를 만족하기 위해 다음과 같은 테스트 케이스를 고려할 수 있다.

        - (a ^ b ^ c) == true && !(a && b && c) == true
        - (a ^ b ^ c) == false && !(a && b && c) == false

    - 이렇게 하면 (a ^ b ^ c) 가 한 번씩 true/false 가 되는 경우를 검증했고, !(a && b && c) 가 한 번씩 true/false 가 되는 경우를 검증했으므로 조건 커버리지를 충족시킬 수 있다.

    - 또는 아래와 같은 케이스도 고려할 수 있다.

        - (a ^ b ^ c) == true && !(a && b && c) == false
        - (a ^ b ^ c) == false && !(a && b && c) == true

    - 이것도 마찬가지로 (a ^ b ^ c) 가 한 번씩 true/false 가 되는 경우를 검증했고, !(a && b && c) 가 한 번씩 true/false 가 되는 경우를 검증했으므로 조건 커버리지를 충족시킬 수 있다.
    - 하지만 이렇게 테스트한 최종 결과는 언제나 false 이므로, 결정 커버리지를 충족시키지는 못한다.

- 코드 커버리지 적용을 위한 조언
    - 그렇다면 결국 어떤 커버리지를 얼마나 적용해야 할까? 여러 정석적인 기법과 많은 이론, 가이드가 있을 것이다. 그것들과는 별개로 순전히 나만의 테스트를 위한 조언들은 다음과 같다.

    1. 구문 커버리지는 최대한 만족시키자.
        - 실무에서는 시간이 쫓겨서든지, 아니면 예외적인 상황에 의해서든지 구문 커버리지를 100% 만족시키지 못 하는 경우는 심심치 않게 나온다. 하지만 개발자 개개인은, 적어도 자신이 작성한 코드에 대해서는 구문 커버리지를 100% 만족시키는 것을 목표로 해야 한다.

    2. 로직을 메소드로 추출하여 테스트 케이스를 줄이자.
        - 결정 커버리지에 대해 설명할 때, 테스트 케이스가 7개나 된다고 했는데, 사실 생각해보면 "유저 상태가 PENDING, TRIAL 이 아니다" 라는 하나의 조건 커버리지를 충족하기 위해 loginId 에 값이 있을 때, email 에 값이 있을 때, phone 에 값이 있을 때를 모두 고려할 필요는 없다. 이 조건은 어느 전달인자에 값이 있는지가 중요하지 않기 때문이다.
        - 따라서, 이 조건을 userStatusNotIn 메소드로 추출하고, 이를 대상으로 조건 커버리지를 충족시키는 테스트는 2개만 있으면 된다. 다른 테스트들에서 이미 true 를 한 번씩 넣어서 테스트를 했다면, false 를 넣는 테스트 한 번만 있어도 충분하다.

    3. 결함 집중 : 테스트 대상의 경중을 따지자.
        - 모든 테스트 대상에 대해 가능한 모든 코드 커버리지를 충족시킨다면 더할 나위 없이 좋다. 하지만 그것이 그만큼 비용과 시간을 투자할 만한 것인지, 그리고 그것이 결과적으로 수익을 창출하는 데 기여하는 행위인지 고려해야 한다.
        - 조건 커버리지를 설명하기 위해 언급한 hasOnlyOne 메소드는 true/false 로만 봤을 때, 5개의 조건에 대하여 커버리지를 충족시켜야 한다.

            - (a ^ b ^ c) == true/false
            - !(a && b && c) == true/false
            - a == true/false
            - b == true/false
            - c == true/false

        - 그런데 이렇게까지 테스트를 하기 위해 시간과 비용을 소모할 가치가 있을 것 같지는 않다. 애초에 내가 이를 메소드로 추출해서 만들어 검증하는 대상은 "정말로 값이 딱 하나만 있는지/없는지"이다. 그렇다면 이것에 대한 조건 커버리지를 충족하기 위해 "값이 하나만 있는 경우"와 "값이 하나만 있지 않은 경우", 2개만 테스트해도 충분하다고 생각한다. 만약 이걸로 부족하다면 "값이 하나도 없는 경우", "값이 모두 있는 경우"까지 해서 4개까지만 해도 충분할 것이다.

        - API 들을 만들다 보면 어떤 것은 기능이 그렇게 복잡하지도 않고 테스트도 간단히 수행해도 괜찮아보이는 반면, 어떤 것들은 코드도 복잡하고 리팩토링이 필요할 것만 같아 보인다. 소프트웨어 공학에는 결함 집중 원리라는 개념이 있는데, 이는 소수의 모듈이 보고된 결함 및 운영 장애의 대부분을 포함하는 상황을 의미한다. 결함 집중을 설명할 때, 애플리케이션의 20% 가 결함의 80% 를 차지한다고 하여 파레토의 법칙을 인용하기도 한다.
        - 즉, 중요한 테스트 대상과 그렇지 않은 테스트 대상이 실제로 존재한다는 것이다. 개발자의 시간과 집중력은 제한적이기 때문에 집중해서 테스트해야 할 대상과 그렇지 않은 대상을 구분하고 적절히 자원을 투입하는 것도 정말 중요하다.
        - 예를 들어, 주문 및 결제와 같은 기능은 간단히 말해 돈이 걸려 있는 매우 중요한 기능이다. 그러다보니 전달해야 하는 데이터도 명확해야 하고, 또 양도 많다. 그 프로세스도 신중히 설계해야 할 뿐만 아니라 발생할 수 있는 예외는 최대한 제어해야만 한다. 이런 상황에서라면 가능한 많은 자원을 투입하여 생각할 수 있는 모든 테스트를 수행한다고 해도 모자람이 없을 것이다.

- 사설
    - 테스트에 대한 이론과 기법은 정말 많이 있다. given / when / then 구성이라거나, TDD, BDD, 테스트 더블, stub, mock 등 공부할 이론이 정말 많다.
    - 만약 테스트 그 자체가 빈약하다고 느껴진다면 inflearn 의 [Practical Testing: 실용적인 테스트 가이드] 라는 강의를 추천하겠다. 테스트에 대한 기초를 가르쳐 줄 뿐만 아니라 여러 테스트 이론들도 간단하게 소개해주기 때문에 입문용으로 아주 적절하다.
