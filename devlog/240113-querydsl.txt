QueryDsl 을 설정하는 방법은 인터넷 블로그에 수많이 있다.
그럼에도 불구하고 추가적인 메모를 남기는 것은 Spring Boot 3.x 버전에서 QueryDsl 설정이 일부 수정된 것처럼 보이기 때문이다.

회사에서도 그랬는데, 자꾸 QClass import 와 관련하여 문제가 생기는 것이다.
그리고 이번 프로젝트에서도 import 가 안 돼서 관련 레퍼런스와 블로그를 계속 뒤져본 결과 아래와 같은 결론을 내렸다.

1. Spring Boot 2.x 버전에서는 QClass 를 build 폴더 아래에 두고 Source 로 설정하여 build 로부터 import 를 한다.
2. Spring Boot 3.x 버전부터 위 방법이 안 되는 현상을 다수의 블로그에서 보고함을 발견했다. 실제로 동일한 컴퓨터, IntelliJ 설정에서 Spring Boot 버전만 달리 하여 테스트한 결과 이러한 현상을 확인할 수 있었다.
3. 해당 블로그들은 generated 폴더를 src/main/ 아래에 위치시키고 import 함으로써 이를 해결했으며, 현재로서는 나도 이 방법만이 '유일'한 해결책이다.
* 어떤 블로그에서는 3.x 버전임에도 IntelliJ 설정을 통해 build 아래 경로를 Content Root 로 추가하여 해결하기도 했는데, 나한테는 그 방법이 적용되지 않았다. 그리고 그 블로그에서도 결국은 generated 를 src 아래에 위치시키는 방법을 선택했다.
4. 그러나 generated 폴더는 clean 과 build 에 따라 영향을 받아 생성, 수정, 삭제되기 때문에 이를 git 으로 팀원들과 공유하는 것은 좋지 않다. 따라서 gitignore 에 `src/main/generated` 를 추가하여 생성된 QClass 가 git 에 올라가지 않도록 설정했다.

결론적으로, Spring Boot 2.x 버전과 Spring Boot 3.x 버전에서 QClass 를 사용하기 위해 gradle 설정이 달라져야 하는 것처럼 보인다. 하지만 여전히 build 의 결과물을 원격 저장소에 올리지 않기 위해 해당 디렉토리를 gitignore 에 추가하여 관리할 필요가 있다.

(Spring Boot 3.x 에서 gradle 설정)
```
dependencies {
    // ...
	// data
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    // ...
}

// query dsl 추가 시작
ext {
	queryDslVersion = "5.0.0"
}

def generated = 'src/main/generated'

tasks.withType(JavaCompile).configureEach {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

sourceSets {
	main.java.srcDirs += [ generated ]
}

clean {
	delete file(generated)
}
// query dsl 추가 끝
```