현재 이 프로젝트의 소스 코드는 github 와 외장하드(SSD) 에 의해 관리되고 있다.
그러다 보니 기존에 자주 사용하던 Maria DB 를 어떻게 관리할지 이슈가 발생하게 됐다.

처음에 MariaDB 엔진을 외장하드에 설치하고 사용하는 것 자체는 괜찮았는데, 이 외장하드를 분리했다가 다시 연결하거나, 다른 노트북에 연결했을 때 예상대로 제대로 커넥션이 생성되지 않았다.
처음엔 클라우드에 별도의 DB 를 생성하고 거기로 연결하고 다닐까 싶기도 했는데, 계속해서 쓸지도 불확실한데 불필요한 비용을 낼 필요는 없다고 판단하여 다른 방법을 찾다가 결국 h2 를 쓰기로 했다.

h2는 자바로 작성된 관계형 database 이다. 가볍고 빠르게 쓰기에도 좋고 여러 모드가 있어서 필요에 따라 선택이 가능하다.
그리고 모드에 따라 별도의 엔진 설치 없이 사용할 수도 있기 때문에 SSD 에 프로젝트를 넣고 다니는 현재 상황에 매우 적합하다고 판단했다.

1. server mode
별도의 h2 db 를 설치하고 이를 실행한 후, 애플리케이션을 부팅할 때 이 db 와 커넥션을 생성한다.
embedded 모드와 비교하자면, 별도의 h2 가 있기 때문에 여러 애플리케이션에서 접근이 가능하다는 차이가 있다.

2. embedded mode
local, product 환경에서 사용할 계획이다. 별도의 h2 설치 없이 애플리케이션 내부 엔진을 활용한다. 따라서 application 이 종료되면 같이 종료된다.
속도 면에서 server mode 보다 우수하나, 다른 애플리케이션에서 접근이 불가능하다는 차이가 있다.
지금으로선 다른 애플리케이션에 의한 접근을 할 생각은 없으니 embedded mode 로도 충분할 것이다.
그리고 in-memory 모드와 비교하면, 내부 엔진을 활용하는 것은 동일하지만 db 파일을 저장하기 때문에 애플리케이션이 종료되더라도 기존 data 가 휘발되지 않는다는 차이가 있다.

3. in-memory mode
위에서 언급한 대로 내부 엔진을 활용하지만 애플리케이션과 생명 주기를 같이 하기에 애플리케이션이 시작되면 db 가 메모리에 생성되고, 종료되면 같이 기존 데이터 등이 휘발된다.
애플리케이션이 종료되면 같이 data 가 휘발되기 때문에, data 를 저장할 필요가 없는 test 환경에서 사용하기에 적합할 것이다.

4. embedded mode 의 주의사항
각 특징을 고려해보면 product 환경에서 embedded mode 를 사용하는 게 좋아보이지만 여러 주의사항과 제약이 따르기도 한다.
거의 모든 서비스는 한 번 배포했다고 끝이 아니라, 요구사항과 테스트에 의해 여러 번의 수정을 거치게 된다.
그리고 그 과정에서 클라이언트의 요구사항에 의해 db 구조 자체가 바뀌는 경우도 있다. 이러한 경우 애플리케이션을 새로 배포하여 실행하기 전에 database 를 먼저 실행시키고 변경사항을 반영할 필요가 생긴다.

그러면 아래와 같이 애플리케이션 시작 시점에 db 를 업데이트하면 되지 않을까, 싶은 생각도 들 수 있다.
```
spring.jpa.hibernate.ddl-auto=update
```

하지만 이 경우 의도한 요구사항을 정확하게 반영할 수 있다고 장담할 수 없기 때문에 굉장히 위험한 생각이다.
product 환경에서는 validate 나 none 이외에는 설정하면 절대 안 된다.
그리고 h2 에도 그런 게 있는지 자세히는 모르지만 옵티마이저, 클러스터링 등의 고급 설정을 한다면 결국 server mode 에서 먼저 db 를 조작해야 할 필요가 있을 것이다.

현재 프로젝트는 변경 가능성이 적을 것으로 예상되는 '포트폴리오' 이기 때문에 embedded mode 를 사용하는 것이지, 실제 제품이라면 거의 웬만하면 server mode 를 사용해야 할 것이다.
