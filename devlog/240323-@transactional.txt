이 기록에서는 3월 16일 작성한 @Modifying 의 내용에서 언급한 외래키 및 @Transactional 에 대해 기술하고 있다.

벌크성 쿼리에 의해 테스트 데이터가 롤백 되지 않고 DB 에 남아있는 문제에 대하여, 로그를 TRACE, DEBUG 등으로 낮추어 트랜잭션 전파도 직접 감시하는 등 여러 모로 알아봤지만, 로그 상으로는 모든 트랜잭션이 기대한 대로 동작하고 있었고 마지막으로 롤백까지 하고 있었다. 하지만 실제로는 DB 에 레코드가 남아 있어서 다른 테스트에 영향을 주고 있었다.

오직 H2 DB 를 사용할 때만 이러한 현상이 생기고 있었다. Maria DB 로 변경을 하니 레코드가 남지 않고 제대로 롤백이 되고 있었다. 내가 이전에 테스트한 환경은 H2 인메모리 모드, 임베디드 모드 2가지였고 서버 모드는 테스트하지 않았다. 왜냐하면 내 프로젝트는 컴퓨터에 있지 않고 외장 SSD 에 들어있고, 그렇기 때문에 어느 환경에서도 DB 를 설치하지 않고 바로 애플리케이션만 테스트해보고 싶었기 때문이다. 즉 H2 의 서버 모드를 사용하는 것 자체가 나의 의도와 H2 의 사용 취지에 적합하지 않은 일이다.

stackoverflow 에서도 나와 같은 현상을 겪어서 올린 게시글이 최소 2건이 있었다. 하지만 H2 에 대한 어떤 해결책은 제시한 사람이 없었고, 나도 결국은 H2 사용을 포기하기로 했다. 그리고 이왕 이렇게 된 거, 실제 product 환경에 가깝게 테스트하려고 한다. 실제로 windows, H2 에서는 잘 동작하는데 가상서버 linux, Maria DB 에서는 동작을 안 하면 테스트를 하는 의미가 사라지는 것 아니겠는가.

물론 product 환경과의 차이는 조금씩 발생할 수 없을 것이다. 운영체제나 파일 경로 같은 것들 말이다. 이런 점까지 감안해서 staging 서버를 따로 두면 좋겠지만 개인 소형 프로젝트를 하는데 그렇게 까지 하는 건 비용 초과다.



아무튼 DB 엔진을 바꿈으로 문제의 원인을 찾았지만 그 이전에도 사실 테스트를 통과한 적은 있다. 문제의 원인을 없애는 게 아니라 문제의 현상을 회피하는 방식, @BeforeEach 로 테스트 이전에 각 테이블 레코드를 모두 삭제하는 것이다. 그런데 여기에서 바로 드는 의문이, 레코드를 삭제하면 외래키 제약에 의해 발생하는 예외를 어떻게 제어할 것이냐는 것이다.
예를 들어 외래키 때문에 TEAM 테이블보다 MEMBER 테이블을 먼저 삭제해야 하는 상황 같은 것인데, 테이블이 많아진다면 이 모든 걸 제어하기 위해 테이블 삭제 순서를 일일이 지정하는 것이 부담되는 비용으로 다가올 것이다. 언제나 그렇지만, 레코드 삭제에 의한 테스트 비용이 테스트 효익을 초과한다면 테스트는 하지 말아야 한다.

위 의문에 대한 대답과, @Transactional 에 의한 버그 등을 조사하기 위해 인터넷에서 검색하다가 향로 님 블로그 포스트를 찾아보게 되었다. 결론적으로 이야기하면 모든 테이블에서 모든 외래키를 제거하고, 필요하다면 INDEX 를 생성하고, 엔티티에 대한 연관관계는 애플리케이션에서 관리를 하면 된다.

`향로 님 블로그 포스트 : 테스트 데이터 초기화에 @Transactional 사용하는 것에 대한 생각(https://jojoldu.tistory.com/761)`

위 블로그에서 소개한 트랜잭션에 의한 문제점을 정리하면 다음과 같다. 유익한 포스트이니 자세한 내용은 위 링크에서 직접 보도록 하자.

1. 의도치 않은 트랜잭션 적용
2. 트랜잭션 전파 속성을 조절한 테스트 롤백 실패
3. 비동기 메서드 테스트 롤백 실패
4. TransactionalEventListener 동작 실패

이러한 점에서, 향로 님은 테스트 환경에서 외래키를 모두 제거하고 테이블 간의 관계는 애플리케이션의 ORM 에서 관리한다고 한다. 처음에는 이게 괜찮은가, 이런 문제가 생기지 않나 ... 생각해보다가 실제로 별 문제가 없다는 생각이 들었다. 그래서 향로 님의 예시 코드를 참고해서 다음과 같은 코드를 만들어 사용했다.

(DataCleaner.class)
```
import jakarta.persistence.EntityManager;
import jakarta.persistence.Table;
import jakarta.persistence.metamodel.EntityType;
import org.springframework.jdbc.core.JdbcTemplate;
import psam.portfolio.sunder.english.global.aspect.trace.Trace;

import javax.sql.DataSource;
import java.util.Set;

public class DataCleaner {

    private final JdbcTemplate jdbcTemplate;
    private final EntityManager entityManager;

    public DataCleaner(DataSource dataSource, EntityManager entityManager) {
        this.jdbcTemplate = new JdbcTemplate(dataSource);
        this.entityManager = entityManager;
    }

    @Trace
    public void cleanUp() {
        Set<EntityType<?>> entities = entityManager.getMetamodel().getEntities();
        for (EntityType<?> entity : entities) {
            Table table = entity.getJavaType().getAnnotation(Table.class);
            if (table != null) {
                jdbcTemplate.execute("truncate table " + table.name());
            }
        }
    }
}
```

실제로 외래키를 제거하고, 외래키였던 컬럼들은 INDEX 를 생성하고, 연관관계를 애플리케이션에서 제어함으로 문제가 해결되긴 했었다. 하지만 문제의 원인이 H2 였음을 알게 되었으니 나는 다음과 같이 프로젝트를 구성하려고 한다.

1. 외래키를 사용하지 않는다. 참고로 Github 팀에서도 외래키를 사용하지 않는다고 하는데 그 이유와 장점에 대해서는 아래에 추가로 서술한다.
2. @Transcational 은 그대로 사용한다. 테스트 데이터 롤백 이외에도 @Transactional 을 사용함으로써 테스트 작성이 편해지는 점이 많아서 일단 그대로 사용하려고 한다. 다음 프로젝트에서는 아마 @Transactional 없이 사용해볼까 한다.
3. @BeforeEach 를 사용한 setUp 은 '지금은' 사용하지 않는다. Maria DB 를 사용함으로 지금은 데이터가 제대로 롤백되고 있으니 그럴 필요가 없다. 다만 언젠가 또 이런 문제가 생길 수 있으니 DataCleaner 자체는 언제든지 바로 사용할 수 있도록 빈으로 생성해두려고 한다.



위에서 언급했듯이 외래키를 사용하지 않는 DB 가, 바람직하지는 않을지도 모르지만, 실제로 그것이 서비스를 제공할 때나 성능을 고려했을 때 문제가 되지는 않을 것 같다. 한편으로는 엔티티 간의 연관관계에 대한 관리를 Persistence 계층의 책임에서 Business 계층의 책임으로 옮겨온다는 점에서 더 좋은 아키텍처라고 볼 수도 있다. 이렇게 하면 확장 가능한 아키텍처, Hexagonal Architecture 등에서 엔티티에 대한 응집도가 더 높아진다.
Github 팀에서도 외래키를 절대로, 어느 곳에서도 사용하지 않는다고 한다.

`At GitHub we do not use foreign keys, ever, anywhere.`

이에 대한 github issue 토론이 있었기에 그 내용 일부를 번역(의역)하여 남긴다. 자세한 내용은 마찬가지로 원문을 찾아 읽어보도록 한다. 아래 번역본에서 `*` 은 주석이다.

`github/gh-ost 이슈 : Thoughts on Foreign Keys?(https://github.com/github/gh-ost/issues/331)`

(github/gh-ost 이슈)
```

GitHub에서는 외래 키를 절대로 사용하지 않습니다.

개인적으로 외래키가 좋은지 나쁜지를 고민하는데 수 년이 걸렸고, 지난 3년 동안(*해당 포스트는 2016년 12월에 작성됨)은 외래키를 사용하지 않아야 한다는 의견을 강력하게 바꾸지 않고 있습니다.

주된 이유는 다음과 같습니다.
- 외래키는 데이터베이스를 샤딩하는 데 방해가 됩니다. 무결성을 관리하기 위해 외래키에 의존할 수도 있지만, 그것은 애플리케이션이 자체적으로 하는 게 아니게 됩니다. 심지어 CASCADE 을 사용한 삭제를 할 수도 있습니다. 그러다가 결국 데이터를 샤딩하거나 추출해야 하는 순간이 오면 애플리케이션을 바꾸고 미지의 영역을 테스트해야 합니다.
- 외래키는 성능에 영향을 미칩니다. 인덱스가 필요하다면, 그것은 괜찮습니다. 그 인덱스는 어차피 필요하기 때문입니다. 하지만 삽입과 삭제 때문에 생기는 조회는 오버헤드입니다.
(*외래키라는 제약이 있는 경우, 삽입/삭제가 이루어질 때마다 DB 는 외래키가 참조하는 테이블에서 해당 값이 존재하는지 그 제약조건을 매번 확인한다. 예를 들어 `members`.`team_id` 에 '1' 을 넣는다면, 그 이전에 `teams`.`id` 에 '1' 이 있는지를 먼저 확인해야 한다. 즉, 1건의 삽입을 하기 위해 무조건 1번 이상의 추가적인 조회가 발생하는데, 이를 오버헤드라고 표현하는 것.)
- 외래키는 온라인 스키마 마이그레이션에서 제대로 작동하지 않습니다.

마지막 이유(*항목, bullet) 은 닭이 먼저냐, 달걀이 먼저냐 하는 문제가 아닙니다. 외래키는 가능한 것과 불가능한 것에 대한 많은 제약을 가합니다.

페이브북의 OSC 첫 등장을 리뷰하고 외래키에 대한 생각을 남긴 예전 포스트를 남기겠습니다.
https://code.openark.org/blog/mysql/mk-schema-change-check-out-ideas-from-oak-online-alter-table

P와 C라는 두 테이블이 있다고 가정해 봅시다. 여기서 P는 Parent를, C는 Child를 나타냅니다. C에는 외래 키가 있어서 C의 각 행이 P의 "부모" 값을 가리킵니다.

C의 스키마 마이그레이션은 가능합니다. 그러나 외래키는 고유한 이름을 가지므로, 새로 마이그레이션된 C 테이블은 원래의 것과 다른 이름의 외래키를 가지게 될 것입니다.

P의 스키마 마이그레이션은 작동하지 않을 것입니다. gh-ost(*깃허브의 MySQL 용 온라인 스키마 마이그레이션 툴)가 마지막에 테이블 이름을 변경한다는 것을 떠올려보십시오. 유감스럽게도, 테이블 이름을 변경하면 외래키가 변경된 테이블로 이동합니다. 유령 테이블(*gh-ost 로 마이그레이션할 때 생기는 부모 테이블의 복사본. 유령 테이블에 데이터를 점진적으로 복사하고 적절한 시기에 원본 테이블은 유령 테이블로 대체된다.)에 부모 측 외래키를 생성하려면 C를 마이그레이션해야 합니다. 그리고 gh-ost 는 비동기 방식을 사용하기 때문에, LOCK 이 걸려있는 동안을 제외하고, P와 P-유령은 어느 시점에서도 완전히 동기화되지 않습니다. 이로 인해 C가 P와 P-유령에 모두 외래키를 가질 수는 없으므로 일부 무결성이 깨집니다.

pt-online-schema-change(*https://docs.percona.com/percona-toolkit/pt-online-schema-change.html)의 문서에 더 많은 토론이 있습니다.
```

```
At GitHub we do not use foreign keys, ever, anywhere.

Personally, it took me quite a few years to make up my mind about whether foreign keys are good or evil, and for the past 3 years I'm in the unchanging strong opinion that foreign keys should not be used. Main reasons are:

FKs are in your way to shard your database. Your app is accustomed to rely on FK to maintain integrity, instead of doing it on its own. It may even rely on FK to cascade deletes (shudder).
When eventually you want to shard or extract data out, you need to change & test the app to an unknown extent.

FKs are a performance impact. The fact they require indexes is likely fine, since those indexes are needed anyhow. But the lookup made for each insert/delete is an overhead.

FKs don't work well with online schema migrations.

This last bullet is not a chicken and an egg, as you might think. FKs impose a lot of constraints on what's possible and what's not possible.

Here's an old post of mine, reviewing the first appearance of Facebook's OSC, and which includes some thoughts on foreign keys: http://code.openark.org/blog/mysql/mk-schema-change-check-out-ideas-from-oak-online-alter-table

Let's say you have two tables, P & C, standing for Parent & Child, respectively. There's a foreign key in C such that each row in C points to some "parent" value in P.

Doing schema migration of C is possible. However since foreign keys have unique names, the new (migrated) C table will have a FK with a different name than the original one.

Doing schema migration of P is just not going to work. Recall that gh-ost renames the table at the end. Alas, when renaming a table away, the FK will move with the renamed table. To create a parent-side FK on the ghost table, one would need to migrate C ; and because gh-ost uses async approach, P and P-ghost are never in complete sync at any point in time (except at lock time) which makes it impossible for C to have both a FK to P and to P-ghost. some integrity will be broken.

There's more discussion on the documentation of pt-online-schema-change
```